syntax = "proto3";

package envoy.config.filter.http.tap.v2alpha;
option go_package = "v2alpha";

import "envoy/api/v2/route/route.proto";

import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";

import "validate/validate.proto";
import "gogoproto/gogo.proto";

// [#protodoc-title: Tap]
// Tap :ref:`configuration overview <config_http_filters_tap>`.

message Tap {
  // The maximum request size that the filter will buffer before the connection
  // manager will stop buffering and return a 413 response.
  google.protobuf.UInt32Value max_request_bytes = 1 [(validate.rules).uint32.gt = 0];

  // The maximum number of seconds that the filter will wait for a complete
  // request before returning a 408 response.
  google.protobuf.Duration max_request_time = 2
      [(validate.rules).duration = {required: true, gt: {}}, (gogoproto.stdduration) = true];

  // TODO (CEV): make sure this comment is accurate.
  //
  // Specifies a set of headers that the filter should match on. The tap filter
  // can be applied selectively to requests that match a set of headers specified
  // in the tap filter config.
  //
  // The filter will check the request's headers against all the specified
  // headers in the filter config. A match will happen if all the headers in
  // the config are present in the request with the same values (or based on
  // presence if the *value* field is not in the config).
  repeated envoy.api.v2.route.HeaderMatcher headers = 3;
}
