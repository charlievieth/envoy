syntax = "proto3";

// [#protodoc-title: HTTP TAP]
// Trace capture format for the http tap filter extension.

package envoy.data.httptap.v2alpha;
option go_package = "v2";

import "envoy/api/v2/core/address.proto";
import "envoy/api/v2/core/base.proto";

import "google/protobuf/timestamp.proto";

// Connection properties.
message Connection {
  // Global unique connection ID for Envoy session. Matches connection IDs used
  // in Envoy logs.
  uint64 id = 1;
  // Local address.
  envoy.api.v2.core.Address local_address = 2;
  // Remote address.
  envoy.api.v2.core.Address remote_address = 3;
}

// Sequence of read/write events that constitute a captured trace on a socket.
// Multiple Trace messages might be emitted for a given connection ID, with the
// sink (e.g. file set, network) responsible for later reassembly.
message Trace {
  // Connection properties.
  Connection connection = 1;
  // Timestamp for event.
  google.protobuf.Timestamp timestamp = 2;
  // HTTP headers.
  repeated core.HeaderValue headers = 3;
  // Binary request/response data
  message Content {
    // Binary data read.
    bytes data = 1;
  }
  // Request or response content as bytes string.
  oneof event_selector {
    Content request = 4;
    Content response = 5;
  }
}
